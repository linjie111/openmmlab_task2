{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.2+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.3+cu113\nOpenCV: 4.5.3\nMMCV: 1.5.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNeXt',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://resnext101_32x4d'),\n        groups=32,\n        base_width=4),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/openbayes/home/train_data.json',\n        img_prefix='/openbayes/input/input0/balloon/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/openbayes/home/val_data.json',\n        img_prefix='/openbayes/input/input0/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/openbayes/home/val_data.json',\n        img_prefix='/openbayes/input/input0/balloon/val',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1120708208, "exp_name": "balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.000 0.000 0.000 0.001", "segm_mAP": 0.0, "segm_mAP_50": 0.002, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.0, "segm_mAP_copypaste": "0.000 0.002 0.000 0.000 0.000 0.000"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.003, "bbox_mAP_50": 0.008, "bbox_mAP_75": 0.001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.004, "bbox_mAP_copypaste": "0.003 0.008 0.001 0.000 0.000 0.004", "segm_mAP": 0.002, "segm_mAP_50": 0.008, "segm_mAP_75": 0.001, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.003, "segm_mAP_copypaste": "0.002 0.008 0.001 0.000 0.000 0.003"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.001, "bbox_mAP_50": 0.003, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.001, "bbox_mAP_copypaste": "0.001 0.003 0.000 0.000 0.000 0.001", "segm_mAP": 0.0, "segm_mAP_50": 0.003, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.001, "segm_mAP_copypaste": "0.000 0.003 0.000 0.000 0.000 0.001"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.003, "bbox_mAP_50": 0.014, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.004, "bbox_mAP_copypaste": "0.003 0.014 0.000 0.000 0.000 0.004", "segm_mAP": 0.001, "segm_mAP_50": 0.006, "segm_mAP_75": 0.0, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.002, "segm_mAP_copypaste": "0.001 0.006 0.000 0.000 0.000 0.002"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.03, "bbox_mAP_50": 0.135, "bbox_mAP_75": 0.007, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.041, "bbox_mAP_copypaste": "0.030 0.135 0.007 0.000 0.000 0.041", "segm_mAP": 0.034, "segm_mAP_50": 0.109, "segm_mAP_75": 0.006, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.045, "segm_mAP_copypaste": "0.034 0.109 0.006 0.000 0.000 0.045"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.022, "bbox_mAP_50": 0.061, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.028, "bbox_mAP_copypaste": "0.022 0.061 0.000 0.000 0.000 0.028", "segm_mAP": 0.036, "segm_mAP_50": 0.154, "segm_mAP_75": 0.014, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.047, "segm_mAP_copypaste": "0.036 0.154 0.014 0.000 0.000 0.047"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.057, "bbox_mAP_50": 0.149, "bbox_mAP_75": 0.057, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.075, "bbox_mAP_copypaste": "0.057 0.149 0.057 0.000 0.000 0.075", "segm_mAP": 0.046, "segm_mAP_50": 0.117, "segm_mAP_75": 0.01, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0, "segm_mAP_l": 0.059, "segm_mAP_copypaste": "0.046 0.117 0.010 0.000 0.000 0.059"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.175, "bbox_mAP_50": 0.41, "bbox_mAP_75": 0.132, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.044, "bbox_mAP_l": 0.231, "bbox_mAP_copypaste": "0.175 0.410 0.132 0.000 0.044 0.231", "segm_mAP": 0.2, "segm_mAP_50": 0.425, "segm_mAP_75": 0.155, "segm_mAP_s": 0.0, "segm_mAP_m": 0.086, "segm_mAP_l": 0.253, "segm_mAP_copypaste": "0.200 0.425 0.155 0.000 0.086 0.253"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.01113, "bbox_mAP": 0.18, "bbox_mAP_50": 0.428, "bbox_mAP_75": 0.121, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.055, "bbox_mAP_l": 0.236, "bbox_mAP_copypaste": "0.180 0.428 0.121 0.000 0.055 0.236", "segm_mAP": 0.171, "segm_mAP_50": 0.387, "segm_mAP_75": 0.129, "segm_mAP_s": 0.0, "segm_mAP_m": 0.061, "segm_mAP_l": 0.243, "segm_mAP_copypaste": "0.171 0.387 0.129 0.000 0.061 0.243"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.01237, "bbox_mAP": 0.237, "bbox_mAP_50": 0.52, "bbox_mAP_75": 0.184, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.087, "bbox_mAP_l": 0.308, "bbox_mAP_copypaste": "0.237 0.520 0.184 0.000 0.087 0.308", "segm_mAP": 0.325, "segm_mAP_50": 0.525, "segm_mAP_75": 0.359, "segm_mAP_s": 0.0, "segm_mAP_m": 0.125, "segm_mAP_l": 0.427, "segm_mAP_copypaste": "0.325 0.525 0.359 0.000 0.125 0.427"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.01361, "bbox_mAP": 0.279, "bbox_mAP_50": 0.553, "bbox_mAP_75": 0.2, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.093, "bbox_mAP_l": 0.353, "bbox_mAP_copypaste": "0.279 0.553 0.200 0.000 0.093 0.353", "segm_mAP": 0.31, "segm_mAP_50": 0.538, "segm_mAP_75": 0.318, "segm_mAP_s": 0.0, "segm_mAP_m": 0.101, "segm_mAP_l": 0.388, "segm_mAP_copypaste": "0.310 0.538 0.318 0.000 0.101 0.388"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.01485, "bbox_mAP": 0.271, "bbox_mAP_50": 0.575, "bbox_mAP_75": 0.159, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.206, "bbox_mAP_l": 0.321, "bbox_mAP_copypaste": "0.271 0.575 0.159 0.000 0.206 0.321", "segm_mAP": 0.342, "segm_mAP_50": 0.603, "segm_mAP_75": 0.445, "segm_mAP_s": 0.0, "segm_mAP_m": 0.273, "segm_mAP_l": 0.402, "segm_mAP_copypaste": "0.342 0.603 0.445 0.000 0.273 0.402"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 0.01608, "bbox_mAP": 0.261, "bbox_mAP_50": 0.555, "bbox_mAP_75": 0.165, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.18, "bbox_mAP_l": 0.318, "bbox_mAP_copypaste": "0.261 0.555 0.165 0.000 0.180 0.318", "segm_mAP": 0.35, "segm_mAP_50": 0.541, "segm_mAP_75": 0.415, "segm_mAP_s": 0.0, "segm_mAP_m": 0.258, "segm_mAP_l": 0.422, "segm_mAP_copypaste": "0.350 0.541 0.415 0.000 0.258 0.422"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 0.01732, "bbox_mAP": 0.308, "bbox_mAP_50": 0.566, "bbox_mAP_75": 0.262, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.187, "bbox_mAP_l": 0.373, "bbox_mAP_copypaste": "0.308 0.566 0.262 0.000 0.187 0.373", "segm_mAP": 0.338, "segm_mAP_50": 0.566, "segm_mAP_75": 0.382, "segm_mAP_s": 0.0, "segm_mAP_m": 0.077, "segm_mAP_l": 0.437, "segm_mAP_copypaste": "0.338 0.566 0.382 0.000 0.077 0.437"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 0.01856, "bbox_mAP": 0.255, "bbox_mAP_50": 0.424, "bbox_mAP_75": 0.358, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.081, "bbox_mAP_l": 0.329, "bbox_mAP_copypaste": "0.255 0.424 0.358 0.000 0.081 0.329", "segm_mAP": 0.342, "segm_mAP_50": 0.432, "segm_mAP_75": 0.402, "segm_mAP_s": 0.0, "segm_mAP_m": 0.106, "segm_mAP_l": 0.441, "segm_mAP_copypaste": "0.342 0.432 0.402 0.000 0.106 0.441"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 0.0198, "bbox_mAP": 0.313, "bbox_mAP_50": 0.576, "bbox_mAP_75": 0.266, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.223, "bbox_mAP_l": 0.369, "bbox_mAP_copypaste": "0.313 0.576 0.266 0.000 0.223 0.369", "segm_mAP": 0.41, "segm_mAP_50": 0.603, "segm_mAP_75": 0.509, "segm_mAP_s": 0.0, "segm_mAP_m": 0.288, "segm_mAP_l": 0.475, "segm_mAP_copypaste": "0.410 0.603 0.509 0.000 0.288 0.475"}
{"mode": "val", "epoch": 17, "iter": 13, "lr": 0.002, "bbox_mAP": 0.438, "bbox_mAP_50": 0.683, "bbox_mAP_75": 0.525, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.314, "bbox_mAP_l": 0.507, "bbox_mAP_copypaste": "0.438 0.683 0.525 0.000 0.314 0.507", "segm_mAP": 0.526, "segm_mAP_50": 0.683, "segm_mAP_75": 0.593, "segm_mAP_s": 0.0, "segm_mAP_m": 0.378, "segm_mAP_l": 0.601, "segm_mAP_copypaste": "0.526 0.683 0.593 0.000 0.378 0.601"}
{"mode": "val", "epoch": 18, "iter": 13, "lr": 0.002, "bbox_mAP": 0.478, "bbox_mAP_50": 0.675, "bbox_mAP_75": 0.527, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.272, "bbox_mAP_l": 0.574, "bbox_mAP_copypaste": "0.478 0.675 0.527 0.000 0.272 0.574", "segm_mAP": 0.534, "segm_mAP_50": 0.67, "segm_mAP_75": 0.599, "segm_mAP_s": 0.0, "segm_mAP_m": 0.35, "segm_mAP_l": 0.619, "segm_mAP_copypaste": "0.534 0.670 0.599 0.000 0.350 0.619"}
{"mode": "val", "epoch": 19, "iter": 13, "lr": 0.002, "bbox_mAP": 0.478, "bbox_mAP_50": 0.684, "bbox_mAP_75": 0.543, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.266, "bbox_mAP_l": 0.57, "bbox_mAP_copypaste": "0.478 0.684 0.543 0.000 0.266 0.570", "segm_mAP": 0.551, "segm_mAP_50": 0.681, "segm_mAP_75": 0.599, "segm_mAP_s": 0.0, "segm_mAP_m": 0.365, "segm_mAP_l": 0.63, "segm_mAP_copypaste": "0.551 0.681 0.599 0.000 0.365 0.630"}
{"mode": "val", "epoch": 20, "iter": 13, "lr": 0.002, "bbox_mAP": 0.486, "bbox_mAP_50": 0.677, "bbox_mAP_75": 0.578, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.277, "bbox_mAP_l": 0.577, "bbox_mAP_copypaste": "0.486 0.677 0.578 0.000 0.277 0.577", "segm_mAP": 0.547, "segm_mAP_50": 0.683, "segm_mAP_75": 0.607, "segm_mAP_s": 0.0, "segm_mAP_m": 0.343, "segm_mAP_l": 0.632, "segm_mAP_copypaste": "0.547 0.683 0.607 0.000 0.343 0.632"}
{"mode": "val", "epoch": 21, "iter": 13, "lr": 0.002, "bbox_mAP": 0.478, "bbox_mAP_50": 0.678, "bbox_mAP_75": 0.577, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.298, "bbox_mAP_l": 0.564, "bbox_mAP_copypaste": "0.478 0.678 0.577 0.000 0.298 0.564", "segm_mAP": 0.548, "segm_mAP_50": 0.682, "segm_mAP_75": 0.596, "segm_mAP_s": 0.0, "segm_mAP_m": 0.37, "segm_mAP_l": 0.63, "segm_mAP_copypaste": "0.548 0.682 0.596 0.000 0.370 0.630"}
{"mode": "val", "epoch": 22, "iter": 13, "lr": 0.002, "bbox_mAP": 0.477, "bbox_mAP_50": 0.675, "bbox_mAP_75": 0.567, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.288, "bbox_mAP_l": 0.566, "bbox_mAP_copypaste": "0.477 0.675 0.567 0.000 0.288 0.566", "segm_mAP": 0.539, "segm_mAP_50": 0.68, "segm_mAP_75": 0.582, "segm_mAP_s": 0.0, "segm_mAP_m": 0.354, "segm_mAP_l": 0.623, "segm_mAP_copypaste": "0.539 0.680 0.582 0.000 0.354 0.623"}
{"mode": "val", "epoch": 23, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.49, "bbox_mAP_50": 0.654, "bbox_mAP_75": 0.566, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.288, "bbox_mAP_l": 0.584, "bbox_mAP_copypaste": "0.490 0.654 0.566 0.000 0.288 0.584", "segm_mAP": 0.542, "segm_mAP_50": 0.663, "segm_mAP_75": 0.591, "segm_mAP_s": 0.0, "segm_mAP_m": 0.362, "segm_mAP_l": 0.627, "segm_mAP_copypaste": "0.542 0.663 0.591 0.000 0.362 0.627"}
{"mode": "val", "epoch": 24, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.493, "bbox_mAP_50": 0.66, "bbox_mAP_75": 0.565, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.288, "bbox_mAP_l": 0.584, "bbox_mAP_copypaste": "0.493 0.660 0.565 0.000 0.288 0.584", "segm_mAP": 0.541, "segm_mAP_50": 0.662, "segm_mAP_75": 0.586, "segm_mAP_s": 0.0, "segm_mAP_m": 0.358, "segm_mAP_l": 0.625, "segm_mAP_copypaste": "0.541 0.662 0.586 0.000 0.358 0.625"}
